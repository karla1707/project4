//
//  CustomerLocationMapView.swift
//  ProductPriceAlert
//
//  Created by Fotios Alatas on 07.04.20.
//  Copyright Â© 2020 Fontys UAS. All rights reserved.
//

import SwiftUI
import MapKit

struct CustomerLocationMapView: View {
    //variables which are used to either store information or for toggling
    @State private var isPresentMap: Bool = false
    @State private var isTheLocation: Bool = true
    @State var lat = ""
    @State var long = ""
    @State var message = ""
    @State var showGlobe: Bool = false
    @State var sellersOnMap : Bool = false
    //location manager which handles the location
    @ObservedObject private var locationManager = LocationManager()
   @EnvironmentObject var customerData : CustomerData
    @EnvironmentObject var loginCustomerData : LoginCustomerData
    @EnvironmentObject var editCustomerData : EditCustomerData
    

    //View of the map
    var mapView = MapViewRetriever()
    //View body
    var body: some View {
        //retireve the coordinates from the address
        let coordiRetriever = CoordinatorRetriever(address: self.customerData.sNumber + "," + self.customerData.street + "," + self.customerData.city + "," + self.customerData.postalCode )
        
        //retreive the coordinates via the GPS
        let coordi = self.locationManager.location != nil
            ? self.locationManager.location!.coordinate : CLLocationCoordinate2D()
        
        return
            NavigationView{
                VStack (spacing: 2){
                    GreetingMessage(message: "Is this your location?")
                    HStack{
                        if(self.showGlobe){
                            Image(systemName: "globe")
                        }
                        Text(self.message).foregroundColor(.green)
                    }.padding(.all)
                    mapView.frame(width: 400, height: 350, alignment: .center)
                    HStack{
                        ZStack{
                            NavigationLink(destination:UploadPictureView(isOnEdit: self.$customerData.isOnEdit,labelValue: self.$customerData.userMessage).environmentObject(self.loginCustomerData).environmentObject(customerData).environmentObject(editCustomerData), isActive: $isPresentMap){
                                Text("")
                            }
                            Button(action:{
                                //if it is the location use the GPS coordinates
                                if(self.isTheLocation){
                                    self.customerData.long = coordi.longitude
                                    self.customerData.lat = coordi.latitude
                                }else{
                                    //else use the one generated by the string address
                                    if let long = Double(self.long){
                                        self.customerData.long = long
                                    }
                                    
                                    if let lat = Double(self.lat){
                                        self.customerData.lat = lat
                                    }
                                }
                                self.message = ""
                                print("Values are : \(self.customerData.lat) \(self.customerData.long)")
                                self.isPresentMap.toggle()
                            }){
                                HStack{
                                    Image(systemName: "camera.fill")
                                        .foregroundColor(.white)
                                    Text("Upload Picture")
                                        .foregroundColor(.white)
                                }
                                .frame(width: CGFloat(140),height: CGFloat(30))
                                .padding(.all)
                                .background(Color.green)
                                .cornerRadius(10.0)
                                
                            }
                        }
                        
                        ZStack{
                            //if the location is not correct use the string to fill it up
                            NiceButton(label: "Not my location", logoBut: "paperplane.fill", width: 140, height: 30, action: {
                                self.isTheLocation.toggle()
                                self.showGlobe.toggle()
                                self.message = "Calculating coordinates"
                                
                                if let long = coordiRetriever.longitude {
                                    self.long = String(long)
                                }
                                
                                
                                if let lat = coordiRetriever.latitude {
                                    self.lat = String(lat)
                                }
                                //Debug purpose
                                print(self.lat + " " + self.long)
                            })
                        }
                    }.padding(.all)
                    HStack{
                        Text("Latitude is: \(coordi.latitude)")
                        Text("Longitude is: \(coordi.longitude)")
                    }
                    Spacer()
                }
            }.frame(minWidth: UIScreen.main.bounds.width, maxWidth: UIScreen.main.bounds.width, minHeight: UIScreen.main.bounds.height-60, maxHeight: UIScreen.main.bounds.height-60)
                .padding(.bottom,60)
    }
}

struct CustomerLocationMapView_Previews: PreviewProvider {
    static var previews: some View {
        CustomerLocationMapView()
    }
}
